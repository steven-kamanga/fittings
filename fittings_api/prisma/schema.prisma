// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String           @unique
  password_hash  String
  phone          String?
  address        String?
  role           Role             @default(consumer)
  golf_club_size String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  swing_analyses SwingAnalysis[]
  FittingRequest FittingRequest[]
  GettingStarted GettingStarted[]
}

enum Role {
  consumer
  admin
}

model SwingAnalysis {
  id         String              @id @default(uuid())
  user       User                @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  status     SwingAnalysisStatus @default(scheduled)
  comments   String?
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt
}

enum SwingAnalysisStatus {
  submitted
  scheduled
  completed
  canceled
}

model FittingRequest {
  id                String               @id @default(uuid())
  user              User                 @relation(fields: [userId], references: [id])
  userId            String
  date              DateTime
  status            FittingRequestStatus @default(submitted)
  comments          String?
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  fittingProgresses FittingProgress[]
  adminTasks        AdminTask[]
}

enum FittingRequestStatus {
  submitted
  prepping
  scheduled
  canceled
  completed
}

model FittingProgress {
  id               String               @id @default(uuid())
  fittingRequest   FittingRequest       @relation(fields: [fittingRequestId], references: [id])
  fittingRequestId String
  step             FittingRequestStatus
  completed_at     DateTime?
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
}

model GettingStarted {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  message    String
  isActive   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AdminTask {
  id               String         @id @default(uuid())
  fittingRequest   FittingRequest @relation(fields: [fittingRequestId], references: [id])
  fittingRequestId String
  task             AdminTaskType
  completed_at     DateTime?
  created_at       DateTime       @default(now())
}

enum AdminTaskType {
  acknowledge_request
  schedule_swing_analysis
  swing_analysis_completed
  fitting_scheduled
  fitting_canceled
  fitting_completed
}
